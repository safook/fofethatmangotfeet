local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = aimbotSettings.CircleRadius
FOVCircle.Filled = aimbotSettings.CircleFilled
FOVCircle.Color = aimbotSettings.CircleColor
FOVCircle.Visible = aimbotSettings.CircleVisible
FOVCircle.Transparency = aimbotSettings.CircleTransparency
FOVCircle.NumSides = aimbotSettings.CircleSides
FOVCircle.Thickness = aimbotSettings.CircleThickness

local function getClosestVisiblePlayer(camera)
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local character = player.Character
            if character and character:FindFirstChild(aimbotSettings.AimPart) then
                local aimPart = character[aimbotSettings.AimPart].Position
                local aimScreenPosition, onScreen = camera:WorldToScreenPoint(aimPart)

                if onScreen then
                    local distanceToCrosshair = (Vector2.new(aimScreenPosition.X, aimScreenPosition.Y) - (camera.ViewportSize / 2)).Magnitude

                    if distanceToCrosshair < aimbotSettings.CircleRadius and distanceToCrosshair < closestDistance then
                        if not aimbotSettings.TeamCheck or player.Team ~= Players.LocalPlayer.Team then
                            if not aimbotSettings.WallCheck then
                                closestDistance = distanceToCrosshair
                                closestPlayer = aimPart
                            else
                                local direction = aimPart - camera.CFrame.Position
                                local ray = Ray.new(camera.CFrame.Position, direction.unit * direction.magnitude)
                                local hitPart, _ = workspace:FindPartOnRay(ray)

                                if hitPart and hitPart.Parent ~= character then
                                    closestDistance = distanceToCrosshair
                                    closestPlayer = aimPart
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

local function updateAimbot()
    if aimbotSettings.MasterEnabled and aimbotSettings.Enabled then
        local closestPlayer = getClosestVisiblePlayer(Camera)

        if closestPlayer then
            local targetCFrame = CFrame.new(Camera.CFrame.Position, closestPlayer)
            Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, 1 / aimbotSettings.Sensitivity)
        end
    end
end

local function onInputBegan(input, gameProcessed)
    if not gameProcessed then
        if input.UserInputType == Enum.UserInputType.MouseButton2 and aimbotSettings.MasterEnabled then
            aimbotSettings.Enabled = true
        end
    end
end

local function onInputEnded(input, gameProcessed)
    if not gameProcessed then
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            aimbotSettings.Enabled = false
        end
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

RunService.RenderStepped:Connect(function()
    if Camera then
        FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    end
end)

RunService.RenderStepped:Connect(function()
    FOVCircle.Radius = aimbotSettings.CircleRadius
    FOVCircle.Filled = aimbotSettings.CircleFilled
    FOVCircle.Color = aimbotSettings.CircleColor
    FOVCircle.Visible = aimbotSettings.CircleVisible
    FOVCircle.Transparency = aimbotSettings.CircleTransparency
    FOVCircle.NumSides = aimbotSettings.CircleSides
    FOVCircle.Thickness = aimbotSettings.CircleThickness
end)

RunService.Heartbeat:Connect(updateAimbot)
